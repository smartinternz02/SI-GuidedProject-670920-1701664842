# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VzLxXYTpLyMfUnE9Eolf6lo7nszQISDF
"""

from google.colab import drive
drive.mount('/content/drive')

import pickle
import pandas as pd

default_port = 6060

from werkzeug.serving import make_server
from flask.templating import render_template,request
from flask import Flask
import threading

class ServerThread(threading.Thread):

    def __init__(self, app, port):
        threading.Thread.__init__(self)
        self.port = port
        self.srv = make_server('127.0.0.1', port, app)
        self.ctx = app.app_context()
        self.ctx.push()

    def run(self):
        print('starting server on port:',self.port)
        self.srv.serve_forever()

    def shutdown(self):
        self.srv.shutdown()

def start_server(port=default_port):
    global server
    if 'server' in globals() and server:
      print('stopping server')
      stop_server()

    template_folder = '/content/drive/MyDrive/Major Project/Flask/templates'
    static_folder = '/content/drive/MyDrive/Major Project/Flask/Static'

    app = Flask(__name__,template_folder=template_folder,static_folder = static_folder)

    with open("/content/drive/MyDrive/Major Project/Training/model.pkl","rb") as model_file:
              model=pickle.load(model_file)


    # you can add your own routes here as needed
    @app.route("/")
    @app.route("/home")
    def home():
       return render_template('index.html')

    @app.route("/details",methods = ["GET","POST"])
    def pred():
        return render_template('details.html')

    @app.route("/predict", methods = ["GET","POST"])
    def predict():
     if request.method == "POST":
        try:
          no_of_adults = int(request.form.get('no_of_adults'))
          print(no_of_adults)
          no_of_children = int(request.form.get('no_of_children'))
          no_of_weekend_nights =  int(request.form.get('no_of_weekend_nights'))
          no_of_week_nights = int(request.form.get('no_of_week_nights'))
          type_of_meal_plan = int(request.form.get('type_of_meal_plan'))
          required_car_parking_space = int(request.form.get('required_car_parking_space'))
          room_type_reserved = int(request.form.get('room_type_reserved'))
          lead_time = int(request.form.get('lead_time'))
          arrival_year = str(request.form.get('arrival_year'))
          print(arrival_year)
          arrival_month =int(request.form.get('arrival_month'))
          arrival_date = int(request.form.get('arrival_date'))
          market_segment_type = int(request.form.get('market_segment_type'))
          repeated_guest = int(request.form.get('repeated_guest'))
          no_of_previous_cancellations = int(request.form.get('no_of_previous_cancellations'))
          no_of_previous_bookings_not_canceled = int(request.form.get('no_of_previous_bookings_not_canceled','0'))
          avg_price_per_room = float(request.form.get('avg_price_per_room'))
          no_of_special_requests = int(request.form.get('no_of_special_requests'))
          total = [[no_of_adults, no_of_children, no_of_weekend_nights, no_of_week_nights,
                type_of_meal_plan, required_car_parking_space, room_type_reserved,lead_time,
                arrival_year, arrival_month, arrival_date, market_segment_type, repeated_guest,
                no_of_previous_cancellations, no_of_previous_bookings_not_canceled, avg_price_per_room,
                no_of_special_requests]]

          d1 = pd.DataFrame(data = total, columns = ['no_of_adults', 'no_of_children', 'no_of_weekend_nights','no_of_week_nights', 'type_of_meal_plan', 'required_car_parking_space','room_type_reserved', 'lead_time', 'arrival_year', 'arrival_month','arrival_date', 'market_segment_type', 'repeated_guest', 'no_of_previous_cancellations', 'no_of_previous_bookings_not_canceled',
         'avg_price_per_room','no_of_special_requests'])

          prediction = model.predict(d1)
          prediction = prediction[0]

          if prediction == 0:
               return render_template('Results.html', prediction_text = "The Reservation will not be cancelled")
          else:
               return render_template('Results.html', prediction_text = "The Reservation will be cancelled")

        except Exception as e:
               return render_template("error.html", error_message=str(e))


    server = ServerThread(app,port)
    server.start()

def stop_server():
    global server
    if server:
      server.shutdown()
      server = None

# Start the server here
start_server()

import requests

r = requests.get('http://localhost:6060')
print(r.text)

import IPython.display

def display(port, height):
    shell = """
        (async () => {
            const url = await google.colab.kernel.proxyPort(%PORT%, {"cache": true});
            const iframe = document.createElement('iframe');
            iframe.src = url;
            iframe.setAttribute('width', '100%');
            iframe.setAttribute('height', '%HEIGHT%');
            iframe.setAttribute('frameborder', 0);
            document.body.appendChild(iframe);
        })();
    """
    replacements = [
        ("%PORT%", "%d" % port),
        ("%HEIGHT%", "%d" % height),
    ]
    for (k, v) in replacements:
        shell = shell.replace(k, v)

    script = IPython.display.Javascript(shell)
    IPython.display.display(script)

display(default_port, 400)

